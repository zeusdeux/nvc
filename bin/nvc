#! /usr/bin/env node

'use strict';

require('colors');

var fs      = require('fs');
var path    = require('path');
var d       = require('debug')('nvc');
var exec    = require('child_process').exec;
var cp      = require('wrench').copyDirSyncRecursive;
var rmdir   = require('wrench').rmdirSyncRecursive;
//var cp    = require('../src/cp');
var args    = process.argv.slice(2);
var nvcPath = path.resolve('.', '.nvc');


// type Path = String
// getNextSnapshotId :: Path -> String
function getNextSnapshotId(nvcPath) {
  return (fs.readdirSync(nvcPath).length + 1);
}

// snap :: IO ()
function snap(msg) {
  var nextSnapshotId = getNextSnapshotId(nvcPath).toString();
  var snapShotPath   = path.join(nvcPath, nextSnapshotId);
  var HEAD           = JSON.parse(fs.readFileSync(path.join(nvcPath, 'HEAD')));

  cp('.', snapShotPath, {
    exclude: /\.nvc/
  });

  // update HEAD with snapshot and message
  HEAD.push({id: nextSnapshotId, message: msg});
  fs.writeFileSync(path.join(nvcPath, 'HEAD'), JSON.stringify(HEAD));

  console.log('nvc: '.blue + 'Snapshot %d created'.green, nextSnapshotId);
}

// checkout :: Int -> IO ()
function checkout(snapshotId) {
  var latestSnapshotId = getNextSnapshotId(nvcPath) - 1;

  snapshotId = 'latest' === snapshotId ? latestSnapshotId : snapshotId;

  if (snapshotId > latestSnapshotId) {
    console.log('nvc: '.blue + 'Snapshot %d hasn\'t been created yet'.red, snapshotId);
    process.exit(1);
  }

  var snapShotPath = path.join(nvcPath, snapshotId + '');
  var files        = fs.readdirSync('.');

  // delete all files and folders except .nvc in cwd (should be project root really)
  files.forEach(function(file) {
    if ('.nvc' === file) return;

    var filePath = path.join('.', file);
    var stats    = fs.statSync(filePath);

    if (stats.isDirectory()) rmdir(filePath, false);
    else fs.unlinkSync(filePath);
  });

  exec('cp -R ' + snapShotPath + '/ .', function(err, stdout, stderr) {
    if (!err) console.log('nvc: '.blue + 'Snapshot %d restored'.green, snapshotId);
  });
}

// type Operation = String
// type Arg = String
// run :: Operation -> [Arg] -> IO ()
function run(operation, args) {
  d('Params %s, %o', operation, args);

  try {
    var stats = fs.statSync(nvcPath);

    if (stats.isDirectory()) perform(operation, args);
    else throw new Error('.nvc exists but is not a directory.');
  }
  catch (e) {
    switch (e.code) {
      case 'ENOENT':
        console.log('nvc: '.blue + 'Creating repository..'.yellow);

        // make directory since it doesn't exist
        fs.mkdirSync('./.nvc', '0755');

        // make HEAD file
        fs.writeFileSync('./.nvc/HEAD', '[]', {
          mode: 420
        }); //420 is 0644 in octal. Try (420).toString(8)

        // perform operation
        perform(operation, args);
        break;
      default:
        // chuck error out to default handler if it isn't ENOENT
        throw e;
    }
  }

}

function perform(operation, args) {
  switch (operation) {
    case 'snap':
    case 'backup':
    snap('-m' ===  args[0] ? args[1] : '');
      break;
    case 'checkout':
      checkout(args[0]);
      break;
    case 'current':
      break;
    case 'log':
      break;
    case 'diff':
      break;
    case 'branch':
      break;
    default:
      console.log('nvc: '.blue + 'Unrecognised command -> '.red + operation.yellow);
      process.exit(1);
  }
}

run(args.shift(), args);
